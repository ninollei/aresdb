// Code generated by mockery v1.0.0
package mocks

import (
	"os"

	"github.com/uber-go/tally"
	"github.com/uber/aresdb/metastore/common"
	"github.com/uber/aresdb/subscriber/common/rules"
	"github.com/uber/aresdb/subscriber/common/tools"
	"github.com/uber/aresdb/subscriber/config"
	"go.uber.org/zap"

	"github.com/stretchr/testify/mock"
	"github.com/uber/aresdb/client"
	"github.com/uber/aresdb/utils"
)

// ControllerClient is an autogenerated mock type for the ControllerClient type
type ControllerClient struct {
	mock.Mock
}

// GetAllSchema provides a mock function with given fields: namespace
func (_m *ControllerClient) GetAllSchema(namespace string) ([]common.Table, error) {
	ret := _m.Called(namespace)

	var r0 []common.Table
	if rf, ok := ret.Get(0).(func(string) []common.Table); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Table)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemaHash provides a mock function with given fields: namespace
func (_m *ControllerClient) GetSchemaHash(namespace string) (string, error) {
	ret := _m.Called(namespace)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignmentHash get hash code of assignment
func (_m *ControllerClient) GetAssignmentHash(jobNamespace, instance string) (string, error) {
	return "12345", nil
}

// GetAssignment gets the job assignment of the ares-subscriber
func (_m *ControllerClient) GetAssignment(jobNamespace, instance string) (*rules.Assignment, error) {
	serviceConfig := config.ServiceConfig{
		Environment: utils.EnvironmentContext{
			Deployment:         "test",
			RuntimeEnvironment: "test",
			Zone:               "local",
		},
		Logger: zap.NewNop(),
		Scope:  tally.NoopScope,
	}
	serviceConfig.ActiveJobs = []string{"job1"}
	serviceConfig.ActiveAresClusters = map[string]client.ConnectorConfig{
		"dev01": client.ConnectorConfig{Address: "localhost:8888"},
	}
	rootPath := tools.GetModulePath("")
	os.Chdir(rootPath)
	jobConfigs := make(rules.JobConfigs)
	rules.AddLocalJobConfig(serviceConfig, jobConfigs)
	jobs := []*rules.JobConfig{
		jobConfigs["job1"]["dev01"],
	}

	aresClusters := map[string]client.ConnectorConfig{
		"dev01": {
			Address: "localhost:5436",
		},
	}

	assignment := &rules.Assignment{
		Subscriber:   "ares-subscriber",
		Jobs:         jobs,
		AresClusters: aresClusters,
	}
	return assignment, nil
}
